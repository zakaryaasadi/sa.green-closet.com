{"remainingRequest":"D:\\Projects\\Web Projects\\new-greencloset.ae\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Projects\\Web Projects\\new-greencloset.ae\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Projects\\Web Projects\\new-greencloset.ae\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\Web Projects\\new-greencloset.ae\\src\\views\\main\\index.vue?vue&type=template&id=567ae6d4&scoped=true&","dependencies":[{"path":"D:\\Projects\\Web Projects\\new-greencloset.ae\\src\\views\\main\\index.vue","mtime":1685099472697},{"path":"D:\\Projects\\Web Projects\\new-greencloset.ae\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655981863969},{"path":"D:\\Projects\\Web Projects\\new-greencloset.ae\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1655981866113},{"path":"D:\\Projects\\Web Projects\\new-greencloset.ae\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655981863969},{"path":"D:\\Projects\\Web Projects\\new-greencloset.ae\\node_modules\\vue-loader\\lib\\index.js","mtime":1655981865577}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJkaXYiLAogICAgeyBzdGF0aWNDbGFzczogImJvZHkiIH0sCiAgICBbCiAgICAgIF9jKCJIZWFkZXIiKSwKICAgICAgX2MoIm1haW4iLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAic2VjdGlvbiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAid29ya19fXG4gICAgIHRvcF9zZWN0aW9uIiwgYXR0cnM6IHsgaWQ6ICJ3b3JrIiB9IH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl9tKDApLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAia2lzd2FoX2NhcmRzIHdlYiIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNCIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiaW52aWV3IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWludmlldzpjbGFzcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogWyJhbmltYXRlX19zbGlkZUluTGVmdCJdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIlsnYW5pbWF0ZV9fc2xpZGVJbkxlZnQnXSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJjbGFzcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjX2NhcmRfXyBhbmltYXRlX19hbmltYXRlZCBzZWNvbmRfIiwKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl9tKDEpLCBfdm0uX20oMildCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTgiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImludmlldyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1pbnZpZXc6Y2xhc3MiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFsiYW5pbWF0ZV9fc2xpZGVJblVwIl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiWydhbmltYXRlX19zbGlkZUluVXAnXSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJjbGFzcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjX2NhcmRfXyBhbmltYXRlX19hbmltYXRlZCBmbGV4X3N0eWxlIiwKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl9tKDMpLCBfdm0uX20oNCldCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiaW52aWV3IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1pbnZpZXc6Y2xhc3MiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbImFuaW1hdGVfX3NsaWRlSW5VcCJdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJbJ2FuaW1hdGVfX3NsaWRlSW5VcCddIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJjbGFzcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjX2NhcmRfXyBhbmltYXRlX19hbmltYXRlZCBibHVlX18iLAogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fbSg1KSwgX3ZtLl9tKDYpXQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC02IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJpbnZpZXciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWludmlldzpjbGFzcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFsiYW5pbWF0ZV9fc2xpZGVJblJpZ2h0Il0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIlsnYW5pbWF0ZV9fc2xpZGVJblJpZ2h0J10iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZzogImNsYXNzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNfY2FyZF9fIGFuaW1hdGVfX2FuaW1hdGVkIGJsdWVfXyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl9tKDcpLCBfdm0uX20oOCldCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfdm0uX20oOSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAic2VjdGlvbiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAid29ya19fXG4gICAgIHRvcF9zZWN0aW9uIiwgYXR0cnM6IHsgaWQ6ICJ3b3JrMSIgfSB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICAgIF92bS5fbSgxMCksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJraXN3YWhfY2FyZHMgd2ViIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC00IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJpbnZpZXciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtaW52aWV3OmNsYXNzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbImFuaW1hdGVfX3NsaWRlSW5MZWZ0Il0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiWydhbmltYXRlX19zbGlkZUluTGVmdCddIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZzogImNsYXNzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNfY2FyZF9fIGFuaW1hdGVfX2FuaW1hdGVkIHNlY29uZF8iLAogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX20oMTEpLCBfdm0uX20oMTIpXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC04IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJpbnZpZXciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtaW52aWV3OmNsYXNzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbImFuaW1hdGVfX3NsaWRlSW5VcCJdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIlsnYW5pbWF0ZV9fc2xpZGVJblVwJ10iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnOiAiY2xhc3MiLAogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY19jYXJkX18gYW5pbWF0ZV9fYW5pbWF0ZWQgZmxleF9zdHlsZSIsCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fbSgxMyksIF92bS5fbSgxNCldCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiaW52aWV3IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1pbnZpZXc6Y2xhc3MiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbImFuaW1hdGVfX3NsaWRlSW5VcCJdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJbJ2FuaW1hdGVfX3NsaWRlSW5VcCddIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJjbGFzcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjX2NhcmRfXyBhbmltYXRlX19hbmltYXRlZCBibHVlX18iLAogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fbSgxNSksIF92bS5fbSgxNildCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTYiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImludmlldyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtaW52aWV3OmNsYXNzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogWyJhbmltYXRlX19zbGlkZUluUmlnaHQiXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiWydhbmltYXRlX19zbGlkZUluUmlnaHQnXSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnOiAiY2xhc3MiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY19jYXJkX18gYW5pbWF0ZV9fYW5pbWF0ZWQgYmx1ZV9fIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX20oMTcpLCBfdm0uX20oMTgpXQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl9tKDE5KSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygic2VjdGlvbiIsIHsgc3RhdGljQ2xhc3M6ICJmZWF0dXJlcyIsIGF0dHJzOiB7IGlkOiAiZmVhdHVyZXMiIH0gfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiwgYXR0cnM6IHsgImRhdGEtYW9zIjogImZhZGUtdXAiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX20oMjApLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWFnZSBjb2wtbGctNiIsCiAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlOgogICAgICAgICAgICAgICAgICAgICAgInVybCgiICsgcmVxdWlyZSgiQC9hc3NldHMvaW1nL2Fib3V0LXVzLmpwZWciKSArICIpIiwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtYW9zIjogImZhZGUtcmlnaHQiIH0sCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJGb290ZXIiKSwKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24gKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uX2hlYWRlciIgfSwgWwogICAgICBfYygiaDIiLCBbX3ZtLl92KCLZg9mK2YHZitipINi52YXZhNmG2KfYnyIpXSksCiAgICBdKQogIH0sCiAgZnVuY3Rpb24gKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjX2NhcmRfaW1nIiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1nL3N0b2NrLXBob3RvLWJlYXV0aWZ1bC1tdXNsaW0tbGFkeS1hdC13b3JrLnBuZyIpLAogICAgICAgICAgYWx0OiAiIiwKICAgICAgICB9LAogICAgICB9KSwKICAgIF0pCiAgfSwKICBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfY2FyZF9pbmZvIiB9LCBbCiAgICAgIF9jKCJoMyIsIFsKICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJudW0iIH0sIFtfdm0uX3YoIjIiKV0pLAogICAgICAgIF92bS5fdigiINiq2KzZhdmK2Lkg2KfZhNmC2LfYuSIpLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgItio2LnYryDYqtiz2KzZitmEINi32YTYqNmDINiMINiz2YrZgtmI2YUg2YXZhtiv2YjYqNmG2Kcg2KjYstmK2KfYsdipINmE2YMg2YHZiiDYuti22YjZhiAyNCDYs9in2LnYqSDZhNin2LPYqtmE2KfZhSDZhdmE2KfYqNiz2YMg2KfZhNil2LbYp9mB2YrYqSDYp9mE2YXZj9ix2KfYryDYp9mE2KrYqNix2Lkg2KjZh9inIgogICAgICAgICksCiAgICAgIF0pLAogICAgXSkKICB9LAogIGZ1bmN0aW9uICgpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19jYXJkX2ltZyIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1nL3ByZXNzLXBob25lLnBuZyIpLCBhbHQ6ICIiIH0sCiAgICAgIH0pLAogICAgXSkKICB9LAogIGZ1bmN0aW9uICgpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19jYXJkX2luZm8iIH0sIFsKICAgICAgX2MoImgzIiwgWwogICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm51bSIgfSwgW192bS5fdigiMSIpXSksCiAgICAgICAgX3ZtLl92KCIg2KrYs9is2YrZhCDYp9mE2LfZhNioIiksCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAi2KfZhNiu2LfZiNipINin2YTYo9mI2YTZiSDYjCDYqtmC2YjZhSDYqNiq2LPYrNmK2YQg2LfZhNio2YMg2YXZhiDYrtmE2KfZhCDZhdmI2YLYudmG2Kcg2KfZhNil2YTZg9iq2LHZiNmG2Yog2KPZiCDYo9mKINmF2YYg2LXZgdit2KfYqtmG2Kcg2YjYrdiz2KfYqNin2KrZhtinINi52YTZiSDZhdmI2KfZgti5INin2YTYqtmI2KfYtdmEINin2YTYp9is2KrZhdin2LnZiiIKICAgICAgICApLAogICAgICBdKSwKICAgIF0pCiAgfSwKICBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfY2FyZF9pbWciIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy9FUTBBMDk0Ny5wbmciKSwgYWx0OiAiIiB9LAogICAgICB9KSwKICAgIF0pCiAgfSwKICBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfY2FyZF9pbmZvIiB9LCBbCiAgICAgIF9jKCJoMyIsIFsKICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJudW0iIH0sIFtfdm0uX3YoIjQiKV0pLAogICAgICAgIF92bS5fdigiINil2LnYp9iv2Kkg2KfZhNiq2K/ZiNmK2LEiKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICLYqNi52K8g2KfZhNiq2KzZhdmK2Lkg2Iwg2YbZgtmI2YUg2KjZgdix2LIg2KfZhNmF2YTYp9io2LMg2KfZhNmF2KzZhdi52Kkg2KXZhNmJINmB2KbYp9iqINmE2KXYudin2K/YqSDYp9iz2KrYrtiv2KfZhdmH2Kcg2KjYo9mF2KfZhiDZiNiz2YfZiNmE2KkiCiAgICAgICAgKSwKICAgICAgXSksCiAgICBdKQogIH0sCiAgZnVuY3Rpb24gKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjX2NhcmRfaW1nIiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvRVEwQTEwNjMucG5nIiksIGFsdDogIiIgfSwKICAgICAgfSksCiAgICBdKQogIH0sCiAgZnVuY3Rpb24gKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjX2NhcmRfaW5mbyIgfSwgWwogICAgICBfYygiaDMiLCBbCiAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAibnVtIiB9LCBbX3ZtLl92KCIzIildKSwKICAgICAgICBfdm0uX3YoIiDYrNin2KbYstiq2YMiKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigi2LPZiNmBINiq2K3YtdmEINi52YTZiSDZhdmD2KfZgdij2Kkg2YHZiNix2YrYqSDYs9mI2KfYoSDZg9in2YbYqiDZhtmC2K/ZitipINij2Ygg2YPZiNio2YjZhtin2Kog2KrYs9mI2YIiKSwKICAgICAgXSksCiAgICBdKQogIH0sCiAgZnVuY3Rpb24gKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJraXN3YWhfY2FyZHMgbW9iaWxlIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tMTIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19jYXJkX18gYW5pbWF0ZV9fYW5pbWF0ZWQgZmxleF9zdHlsZSIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfY2FyZF9pbWciIH0sIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvcHJlc3MtcGhvbmUucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjX2NhcmRfaW5mbyIgfSwgWwogICAgICAgICAgICAgIF9jKCJoMyIsIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm51bSIgfSwgW192bS5fdigiMSIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiDYqtiz2KzZitmEINin2YTYt9mE2KgiKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgItin2YTYrti32YjYqSDYp9mE2KPZiNmE2Ykg2Iwg2KrZgtmI2YUg2KjYqtiz2KzZitmEINi32YTYqNmDINmF2YYg2K7ZhNin2YQg2YXZiNmC2LnZhtinINin2YTYpdmE2YPYqtix2YjZhtmKINij2Ygg2KPZiiDZhdmGINi12YHYrdin2KrZhtinINmI2K3Ys9in2KjYp9iq2YbYpyDYudmE2Ykg2YXZiNin2YLYuSDYp9mE2KrZiNin2LXZhCDYp9mE2KfYrNiq2YXYp9i52YoiCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTEyIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfY2FyZF9fIGFuaW1hdGVfX2FuaW1hdGVkIHNlY29uZF8iIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjX2NhcmRfaW1nIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1nL3N0b2NrLXBob3RvLWJlYXV0aWZ1bC1tdXNsaW0tbGFkeS1hdC13b3JrLnBuZyIpLAogICAgICAgICAgICAgICAgICBhbHQ6ICIiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19jYXJkX2luZm8iIH0sIFsKICAgICAgICAgICAgICBfYygiaDMiLCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJudW0iIH0sIFtfdm0uX3YoIjIiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIg2KrYrNmF2YrYuSDYp9mE2YLYt9i5IiksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICLYqNi52K8g2KrYs9is2YrZhCDYt9mE2KjZgyDYjCDYs9mK2YLZiNmFINmF2YbYr9mI2KjZhtinINio2LLZitin2LHYqSDZhNmDINmB2Yog2LrYttmI2YYgMjQg2LPYp9i52Kkg2YTYp9iz2KrZhNin2YUg2YXZhNin2KjYs9mDINin2YTYpdi22KfZgdmK2Kkg2KfZhNmF2Y/Ysdin2K8g2KfZhNiq2KjYsdi5INio2YfYpyIKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tMTIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19jYXJkX18gYW5pbWF0ZV9fYW5pbWF0ZWQgYmx1ZV9fIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19jYXJkX2ltZyIgfSwgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy9FUTBBMTA2My5wbmciKSwgYWx0OiAiIiB9LAogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjX2NhcmRfaW5mbyIgfSwgWwogICAgICAgICAgICAgIF9jKCJoMyIsIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm51bSIgfSwgW192bS5fdigiMyIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiDYrNin2KbYstiq2YMiKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgItiz2YjZgSDYqtit2LXZhCDYudmE2Ykg2YXZg9in2YHYo9ipINmB2YjYsdmK2Kkg2LPZiNin2KEg2YPYp9mG2Kog2YbZgtiv2YrYqSDYo9mIINmD2YjYqNmI2YbYp9iqINiq2LPZiNmCIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS0xMiIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjX2NhcmRfXyBhbmltYXRlX19hbmltYXRlZCBibHVlX18iIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjX2NhcmRfaW1nIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1nL0VRMEEwOTQ3LnBuZyIpLCBhbHQ6ICIiIH0sCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfY2FyZF9pbmZvIiB9LCBbCiAgICAgICAgICAgICAgX2MoImgzIiwgWwogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAibnVtIiB9LCBbX3ZtLl92KCI0IildKSwKICAgICAgICAgICAgICAgIF92bS5fdigiINil2LnYp9iv2Kkg2KfZhNiq2K/ZiNmK2LEiKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgItio2LnYryDYp9mE2KrYrNmF2YrYuSDYjCDZhtmC2YjZhSDYqNmB2LHYsiDYp9mE2YXZhNin2KjYsyDYp9mE2YXYrNmF2LnYqSDYpdmE2Ykg2YHYptin2Kog2YTYpdi52KfYr9ipINin2LPYqtiu2K/Yp9mF2YfYpyDYqNij2YXYp9mGINmI2LPZh9mI2YTYqSIKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgXSkKICB9LAogIGZ1bmN0aW9uICgpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2VjdGlvbl9oZWFkZXIiIH0sIFsKICAgICAgX2MoImgyIiwgW192bS5fdigi2YPZitmB2YrYqSDYudmF2YTZhtinINmF2Lkg2KfZhNi02LHZg9in2Kog2YjYp9mE2KzZhdi52YrYp9iqIildKSwKICAgIF0pCiAgfSwKICBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfY2FyZF9pbWciIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvc3RvY2stcGhvdG8tYmVhdXRpZnVsLW11c2xpbS1sYWR5LWF0LXdvcmsucG5nIiksCiAgICAgICAgICBhbHQ6ICIiLAogICAgICAgIH0sCiAgICAgIH0pLAogICAgXSkKICB9LAogIGZ1bmN0aW9uICgpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19jYXJkX2luZm8iIH0sIFsKICAgICAgX2MoImgzIiwgWwogICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm51bSIgfSwgW192bS5fdigiMiIpXSksCiAgICAgICAgX3ZtLl92KCIg2KrZiNmC2YrYuSDYp9mE2KfYqtmB2KfZgtmK2KkiKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigi2KrZiNmC2Lkg2KfYqtmB2KfZgtmK2Kkg2KfZhNiq2LnYp9mI2YYg2KjZitmGIEdyZWVuIENsb3NldCDZiNi02LHZg9iq2YMg2KPZiCDYrNmF2LnZitiq2YMiKSwKICAgICAgXSksCiAgICBdKQogIH0sCiAgZnVuY3Rpb24gKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjX2NhcmRfaW1nIiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvcHJlc3MtcGhvbmUucG5nIiksIGFsdDogIiIgfSwKICAgICAgfSksCiAgICBdKQogIH0sCiAgZnVuY3Rpb24gKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjX2NhcmRfaW5mbyIgfSwgWwogICAgICBfYygiaDMiLCBbCiAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAibnVtIiB9LCBbX3ZtLl92KCIxIildKSwKICAgICAgICBfdm0uX3YoIiDYp9mE2KfYqtmB2KfZgiDYudmE2Ykg2KjZhtmI2K8g2KfZhNin2KrZgdin2YLZitipIiksCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoItiq2LnZitmK2YYg2LTYsdmI2Lcg2KfZhNin2KrZgdin2YLZitipINin2YTYrtin2LXYqSDYqNmG2Kcg2YjYqtit2K/ZitivINiv2YjYsSDZg9mEINi32LHZgSDZgdmK2YfYpyIpLAogICAgICBdKSwKICAgIF0pCiAgfSwKICBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfY2FyZF9pbWciIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy9FUTBBMDk0Ny5wbmciKSwgYWx0OiAiIiB9LAogICAgICB9KSwKICAgIF0pCiAgfSwKICBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfY2FyZF9pbmZvIiB9LCBbCiAgICAgIF9jKCJoMyIsIFsKICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJudW0iIH0sIFtfdm0uX3YoIjQiKV0pLAogICAgICAgIF92bS5fdigiINiq2YbZgdmK2LAg2KfZhNin2KrZgdin2YLZitipICIpLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgItio2LnYryDYp9mE2KrYrNmF2YrYuSDYjCDZhtmC2YjZhSDYqNmB2LHYsiDYp9mE2YXZhNin2KjYsyDYpdmE2Ykg2YHYptin2Kog2K3YqtmJINmG2KrZhdmD2YYg2YXZhiDYqtmI2LLZiti52YfYpyDYqNin2YTYt9ix2YrZgtipINin2YTYtdit2YrYrdipIgogICAgICAgICksCiAgICAgIF0pLAogICAgXSkKICB9LAogIGZ1bmN0aW9uICgpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19jYXJkX2ltZyIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1nL0VRMEExMDYzLnBuZyIpLCBhbHQ6ICIiIH0sCiAgICAgIH0pLAogICAgXSkKICB9LAogIGZ1bmN0aW9uICgpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19jYXJkX2luZm8iIH0sIFsKICAgICAgX2MoImgzIiwgWwogICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm51bSIgfSwgW192bS5fdigiMyIpXSksCiAgICAgICAgX3ZtLl92KCIg2KrYrNmF2YrYuSIpLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCLZhtmC2YjZhSDYqNis2YXYuSDYp9mE2YXZhNin2KjYsyDYp9mE2YXYrNmF2LnYqSDZhdmGINmC2KjZhCDYtNix2YPYqtmDIildKSwKICAgIF0pCiAgfSwKICBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImtpc3dhaF9jYXJkcyBtb2JpbGUiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbS0xMiIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjX2NhcmRfXyBhbmltYXRlX19hbmltYXRlZCBmbGV4X3N0eWxlIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19jYXJkX2ltZyIgfSwgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy9wcmVzcy1waG9uZS5wbmciKSwKICAgICAgICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfY2FyZF9pbmZvIiB9LCBbCiAgICAgICAgICAgICAgX2MoImgzIiwgWwogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAibnVtIiB9LCBbX3ZtLl92KCIxIildKSwKICAgICAgICAgICAgICAgIF92bS5fdigiINin2YTYp9iq2YHYp9mCINi52YTZiSDYqNmG2YjYryDYp9mE2KfYqtmB2KfZgtmK2KkiKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgItiq2LnZitmK2YYg2LTYsdmI2Lcg2KfZhNin2KrZgdin2YLZitipINin2YTYrtin2LXYqSDYqNmG2Kcg2YjYqtit2K/ZitivINiv2YjYsSDZg9mEINi32LHZgSDZgdmK2YfYpyIKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tMTIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19jYXJkX18gYW5pbWF0ZV9fYW5pbWF0ZWQgc2Vjb25kXyIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfY2FyZF9pbWciIH0sIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvc3RvY2stcGhvdG8tYmVhdXRpZnVsLW11c2xpbS1sYWR5LWF0LXdvcmsucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIiIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjX2NhcmRfaW5mbyIgfSwgWwogICAgICAgICAgICAgIF9jKCJoMyIsIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm51bSIgfSwgW192bS5fdigiMiIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiDYqtmI2YLZiti5INin2YTYp9iq2YHYp9mC2YrYqSIpLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAi2KrZiNmC2Lkg2KfYqtmB2KfZgtmK2Kkg2KfZhNiq2LnYp9mI2YYg2KjZitmGIEdyZWVuIENsb3NldCDZiNi02LHZg9iq2YMg2KPZiCDYrNmF2LnZitiq2YMiCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTEyIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfY2FyZF9fIGFuaW1hdGVfX2FuaW1hdGVkIGJsdWVfXyIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNfY2FyZF9pbWciIH0sIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvRVEwQTEwNjMucG5nIiksIGFsdDogIiIgfSwKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19jYXJkX2luZm8iIH0sIFsKICAgICAgICAgICAgICBfYygiaDMiLCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJudW0iIH0sIFtfdm0uX3YoIjMiKV0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIg2KrYrNmF2YrYuSIpLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigi2YbZgtmI2YUg2KjYrNmF2Lkg2KfZhNmF2YTYp9io2LMg2KfZhNmF2KzZhdi52Kkg2YXZhiDZgtio2YQg2LTYsdmD2KrZgyIpXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtc20tMTIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19jYXJkX18gYW5pbWF0ZV9fYW5pbWF0ZWQgYmx1ZV9fIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY19jYXJkX2ltZyIgfSwgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy9FUTBBMDk0Ny5wbmciKSwgYWx0OiAiIiB9LAogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjX2NhcmRfaW5mbyIgfSwgWwogICAgICAgICAgICAgIF9jKCJoMyIsIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm51bSIgfSwgW192bS5fdigiNCIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiDYqtmG2YHZitiwINin2YTYp9iq2YHYp9mC2YrYqSIpLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAi2KjYudivINin2YTYqtis2YXZiti5INiMINmG2YLZiNmFINio2YHYsdiyINin2YTZhdmE2KfYqNizINil2YTZiSDZgdim2KfYqiDYrdiq2Ykg2YbYqtmF2YPZhiDZhdmGINiq2YjYstmK2LnZh9inINio2KfZhNi32LHZitmC2Kkg2KfZhNi12K3Zitit2KkiCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgIF0pCiAgfSwKICBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogImNvbC1sZy02IGFyIiwKICAgICAgICBhdHRyczogeyAiZGF0YS1hb3MiOiAiZmFkZS1sZWZ0IiwgImRhdGEtYW9zLWRlbGF5IjogIjEwMCIgfSwKICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaWNvbi1ib3ggbXQtNSBtdC1sZy0wIiwKICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtYW9zIjogInpvb20taW4iLCAiZGF0YS1hb3MtZGVsYXkiOiAiMTUwIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiYnggYngtaW5mby1jaXJjbGUiIH0pLAogICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCLYudmG2YbYpyIpXSksCiAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJHcmVlbiBDbG9zZXQg2YfZiiDYtNix2YPYqSDYqtmH2K/ZgSDZhNmE2K3Zgdin2Lgg2LnZhNmJINin2YTYqNmK2KbYqSDZiNiq2YbZhdmK2Kkg2KfZhNin2LPYqtiv2KfZhdip2Iwg2KrYo9iz2LPYqiDYudin2YUgMjAyMiDZiNmF2YLYsdmH2Kcg2YHZiiDYp9mE2KXZhdin2LHYp9iqINin2YTYudix2KjZitipINin2YTZhdiq2K3Yr9ipLiDZhtmC2YjZhSDYqNiq2KzZhdmK2Lkg2KfZhNmF2YTYp9io2LMg2KfZhNmC2K/ZitmF2KnYjCDYp9mE2LLYp9im2K/YqdiMINij2Ygg2LrZitixINin2YTYttix2YjYsdmK2Kkg2YjZhtiz2YTZhdmH2Kcg2YTZhdmGINmH2YUg2YHZiiDYrdin2KzYqSDYpdmE2YrZh9inINit2YLZi9inINij2Ygg2YrYqtmFINil2LnYp9iv2Kkg2KrYr9mI2YrYsdmH2KcgIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpY29uLWJveCBtdC01IiwKICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtYW9zIjogInpvb20taW4iLCAiZGF0YS1hb3MtZGVsYXkiOiAiMTUwIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiYnggYngtcm9ja2V0IiB9KSwKICAgICAgICAgICAgX2MoImg0IiwgW192bS5fdigi2YXZh9mF2KrZhtinICIpXSksCiAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICLZhNiq2LnYstmK2LIg2KfZhNin2LPYqtiv2KfZhdipINmF2YYg2K7ZhNin2YQg2KzZhdi5INin2YTZhdmE2KfYqNizINin2YTZhdiz2KrYudmF2YTYqSDZiNil2LnYp9iv2Kkg2KfYs9iq2K7Yr9in2YXZh9inLiDZhtik2YXZhiDYo9mG2Ycg2YXZhiDYrtmE2KfZhCDYpdi52LfYp9ihINit2YrYp9ipINis2K/Zitiv2Kkg2YTZhNmF2YTYp9io2LMg2KfZhNmF2LPYqti52YXZhNip2Iwg2YrZhdmD2YbZhtinINiq2YLZhNmK2YQg2YbZgdin2YrYp9iqINin2YTZhdmE2KfYqNizINmF2YYg2KfZhNi32KjZiti52Kkg2YjYrdmF2KfZitipINin2YTYqNmK2KbYqS4iCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXSksCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImljb24tYm94IG10LTUiLAogICAgICAgICAgICBhdHRyczogeyAiZGF0YS1hb3MiOiAiem9vbS1pbiIsICJkYXRhLWFvcy1kZWxheSI6ICIxNTAiIH0sCiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJieCBieC10YXJnZXQtbG9jayIgfSksCiAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoItmH2K/ZgdmG2KciKV0pLAogICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAi2YTZhNit2YHYp9i4INi52YTZiSDYo9mD2KjYsSDZgtiv2LEg2YXZhdmD2YYg2YXZhiDYp9mE2YXZhNin2KjYsyDYqNi52YrYr9mL2Kcg2LnZhiDZhdmC2KfZhNioINin2YTZgtmF2KfZhdipLiDYqNin2YTYpdi22KfZgdipINil2YTZiSDYsNmE2YMg2Iwg2YbYrdmGINmG2LnZhdmEINio2LTZg9mEINmI2KvZitmCINmF2Lkg2KfZhNmF2KzYqtmF2LnYp9iqINmI2KfZhNmF2YbYuNmF2KfYqiDZhNiy2YrYp9iv2Kkg2KfZhNmI2LnZiiDYp9mE2KjZitim2Yog2YjZhdiz2KfYudiv2Kkg2YXZhiDZh9mFINmB2Yog2KPZhdizINin2YTYrdin2KzYqSDYpdmE2YrZh9inINit2YLZi9inLiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICBdKSwKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaWNvbi1ib3ggbXQtNSIsCiAgICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLWFvcyI6ICJ6b29tLWluIiwgImRhdGEtYW9zLWRlbGF5IjogIjE1MCIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImJ4IGJ4LXN1biIgfSksCiAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoItix2KTZitiq2YbYpyIpXSksCiAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICLYo9mGINmG2YPZiNmGINin2YTYtNix2YPYqSDYp9mE2LHYp9im2K/YqSDZgdmKINmF2KzYp9mEINil2LnYp9iv2Kkg2KrYr9mI2YrYsSDYp9mE2YXZhNin2KjYsyDYp9mE2YXYs9iq2LnZhdmE2KkuINmG2YfYr9mBINil2YTZiSDYpdit2K/Yp9irINiq2KPYq9mK2LEg2YHZiiDYp9mE2YXYrNiq2YXYuSDZhdmGINiu2YTYp9mEINmF2LPYp9i52K/YqSDYqNmK2KbYqtmG2Kcg2YjZhdis2KrZhdi52YbYp9iMINiv2LnZhSDYp9mE2KzZhdi52YrYp9iqINin2YTYrtmK2LHZitipINin2YTZhdit2YTZitip2Iwg2YjYqtmI2YHZitixINmB2LHYtSDYp9mE2LnZhdmE2Iwg2YXYuSDZiNi22Lkg2YfYr9mB2YbYpyDYp9mE2LHYptmK2LPZiiDZgdmKINin2YTYp9i52KrYqNin2LEg2YjZh9mIINiu2YTZgiDZhdiz2KrZgtio2YQg2YXYs9iq2K/Yp9mFINmI2KPZgdi22YQgIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXQogICAgICAgICksCiAgICAgIF0KICAgICkKICB9LApdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}