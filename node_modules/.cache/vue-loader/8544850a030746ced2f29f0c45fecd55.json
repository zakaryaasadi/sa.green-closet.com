{"remainingRequest":"D:\\Projects\\Web Projects\\new-greencloset.ae\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\Web Projects\\new-greencloset.ae\\src\\views\\en-main\\index.vue?vue&type=template&id=5e58dba1&scoped=true&","dependencies":[{"path":"D:\\Projects\\Web Projects\\new-greencloset.ae\\src\\views\\en-main\\index.vue","mtime":1685187006748},{"path":"D:\\Projects\\Web Projects\\new-greencloset.ae\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655981863969},{"path":"D:\\Projects\\Web Projects\\new-greencloset.ae\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1655981866113},{"path":"D:\\Projects\\Web Projects\\new-greencloset.ae\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655981863969},{"path":"D:\\Projects\\Web Projects\\new-greencloset.ae\\node_modules\\vue-loader\\lib\\index.js","mtime":1655981865577}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}