{"remainingRequest":"D:\\Projects\\Web Projects\\sa.green-closet.com\\node_modules\\babel-loader\\lib\\index.js!D:\\Projects\\Web Projects\\sa.green-closet.com\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Projects\\Web Projects\\sa.green-closet.com\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Projects\\Web Projects\\sa.green-closet.com\\node_modules\\vue-google-autocomplete\\src\\VueGoogleAutocomplete.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Projects\\Web Projects\\sa.green-closet.com\\node_modules\\vue-google-autocomplete\\src\\VueGoogleAutocomplete.vue","mtime":1655981866336},{"path":"D:\\Projects\\Web Projects\\sa.green-closet.com\\babel.config.js","mtime":1642499299534},{"path":"D:\\Projects\\Web Projects\\sa.green-closet.com\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655981863969},{"path":"D:\\Projects\\Web Projects\\sa.green-closet.com\\node_modules\\babel-loader\\lib\\index.js","mtime":1655981866419},{"path":"D:\\Projects\\Web Projects\\sa.green-closet.com\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655981863969},{"path":"D:\\Projects\\Web Projects\\sa.green-closet.com\\node_modules\\vue-loader\\lib\\index.js","mtime":1655981865577}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAkBA;EACAA,wBADA;EAEAC,2BAFA;EAGAC,kBAHA;EAIAC,qBAJA;EAKAC,yCALA;EAMAC,wCANA;EAOAC,oBAPA;EAQAC;AARA;AAWA;AACA,2EACA,6BADA,EACA,6BADA;AAGA;AACA;AACA;;AAEA;;AAEA,0EACA,mBADA,EACA,UADA,EACA,MADA,EACA,IADA,EACA,MADA,EAEA,iBAFA,EAEA,OAFA,EAEA,UAFA,EAEA,OAFA,EAEA,MAFA,EAEA,KAFA,EAGA,oBAHA,EAGA,UAHA;AAKA;EACAC,6BADA;EAGAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAMAC,iBANA;IAQAC;MACAH,YADA;MAEAI;IAFA,CARA;IAaAC;MACAL,aADA;MAEAI;IAFA,CAbA;IAkBAE;MACAN,YADA;MAEAI;IAFA,CAlBA;IAuBAG;MACAP,WADA;MAEAI;QACA;MACA;IAJA,CAvBA;IA8BAT;MACAK,qBADA;MAEAI;IAFA,CA9BA;IAmCAI;MACAR,aADA;MAEAI;IAFA,CAnCA;IAwCAK;MACAT,YADA;MAEAI;IAFA;EAxCA,CAHA;;EAiDAM;IACA;MACA;AACA;AACA;AACA;AACA;AACA;MACAC,kBAPA;;MASA;AACA;AACA;AACA;MACAC,oBAbA;MAeAC;QACA;AACA;AACA;AACA;AACA;QACAC,cANA;;QAQA;AACA;AACA;AACA;AACA;QACAC,SAbA;;QAeA;AACA;AACA;AACA;AACA;QACAC;MApBA;IAfA;EAsCA,CAxFA;;EA0FAC;IACAL;MACA;QAAAM;QAAAC;MAAA;IACA,CAHA;IAIAxB;MACA;QACAA;MADA;IAGA;EARA,CA1FA;EAqGAyB;IACA;;IAEA;MACAC;IACA;;IAEA;MACAA;QACA1B;MADA;IAGA;;IAEA,wDACA2B,gCADA,EAEAD,OAFA;IAKA;IAEA;EACA,CA1HA;EA4HAE;IACA;AACA;AACA;IACAC;MACA;;MAEA;QACA;QACA;QACA;QACA;MACA;;MAEA;QACA;QACA,qEAFA,CAIA;;QACA;QACA;MACA;IACA,CAtBA;;IAwBA;AACA;AACA;IACAC;MACA;MACA;IACA,CA9BA;;IAgCA;AACA;AACA;IACAC;MACA;IACA,CArCA;;IAuCA;AACA;AACA;IACAC;MACA;IACA,CA5CA;;IA8CA;AACA;AACA;AACA;IACAC;MACA;IACA,CApDA;;IAsDA;AACA;AACA;AACA;IACAC;MACA;IACA,CA5DA;;IA8DA;AACA;AACA;IACAC;MACA;IACA,CAnEA;;IAqEA;AACA;AACA;IACAC;MACA;IACA,CA1EA;;IA4EA;AACA;AACA;IACAC;MACA;IACA,CAjFA;;IAmFA;AACA;AACA;AACA;IACAC;MACA;IACA,CAzFA;;IA2FA;AACA;AACA;AACA;IACAC;MACA;MACA;MACA;QAAA;MAAA;QACA;UACAC;;UACA;YACA;YACA;UACA,CAHA,MAGA;YACA;UACA;QACA,CARA,MAQA;UACA;QACA;MACA,CAZA;IAaA,CA/GA;;IAiHA;AACA;AACA;IACAC;MACA;QACA;MACA,CAFA;IAGA,CAxHA;;IA0HA;AACA;AACA;AACA;IACAC;MACA;QACA;QACA;QACAC;UACA;YACAC,6BADA;YAEAC;UAFA;UAIA;UACA;UAEA;QACA,CATA,EASAC;UACA;QACA,CAXA,EAWApB,OAXA;MAYA;IACA,CA/IA;;IAkJA;IACA;IACAqB;MACA;QACA;UACA;YACAC,mBADA;YAEAC;UAFA;UAIA;QACA,CANA;MAOA;IACA,CA9JA;;IAgKA;AACA;AACA;AACA;AACA;IACAC;MACA;;MACA;QACA;;QAEA;UACA;UACAC;QACA;MACA;;MAEAA;MACAA;MACA;IACA,CAnLA;;IAqLA;AACA;AACA;AACA;AACA;AACA;AACA;IACAC;MACA;MACA;MACA;MACA;MACA;;MAEA;QACA;UACA;YACAC;YACA;UACA;QACA;MACA;;MACA;IACA;;EA5MA;AA5HA","names":["subpremise","street_number","route","locality","administrative_area_level_1","administrative_area_level_2","country","postal_code","name","props","id","type","required","classname","placeholder","default","disabled","types","fields","enableGeolocation","geolocationOptions","data","autocomplete","autocompleteText","geolocation","geocoder","loc","position","watch","newVal","oldVal","mounted","options","document","methods","onPlaceChanged","onFocus","onBlur","onChange","onKeyPress","onKeyUp","clear","focus","blur","update","updateCoordinates","results","geolocate","updateGeolocation","navigator","lat","lng","err","biasAutocompleteLocation","center","radius","formatResult","returnData","filterGeocodeResultTypes","output"],"sourceRoot":"node_modules/vue-google-autocomplete/src","sources":["VueGoogleAutocomplete.vue"],"sourcesContent":["<template>\n    <input\n        ref=\"autocomplete\"\n        type=\"text\"\n        :class=\"classname\"\n        :id=\"id\"\n        :placeholder=\"placeholder\"\n        :disabled=\"disabled\"\n        v-model=\"autocompleteText\"\n        @focus=\"onFocus()\"\n        @blur=\"onBlur()\"\n        @change=\"onChange\"\n        @keypress=\"onKeyPress\"\n        @keyup=\"onKeyUp\"\n    />\n</template>\n\n<script>\n    const ADDRESS_COMPONENTS = {\n        subpremise : 'short_name',\n        street_number: 'short_name',\n        route: 'long_name',\n        locality: 'long_name',\n        administrative_area_level_1: 'short_name',\n        administrative_area_level_2: 'long_name',\n        country: 'long_name',\n        postal_code: 'short_name'\n    };\n\n    const CITIES_TYPE = ['locality', 'administrative_area_level_3'];\n    const REGIONS_TYPE = ['locality', 'sublocality', 'postal_code', 'country',\n        'administrative_area_level_1', 'administrative_area_level_2'];\n\n    /*\n      By default, we're only including basic place data because requesting these \n      fields place data is not additionally charged by Google. Please refer to:\n\n      https://developers.google.com/maps/billing/understanding-cost-of-use#basic-data\n    */\n    const BASIC_DATA_FIELDS = ['address_components', 'adr_address', 'alt_id', \n        'formatted_address', 'geometry', 'icon', 'id', 'name', \n        'business_status', 'photo', 'place_id', 'scope', 'type', 'url', \n        'utc_offset_minutes', 'vicinity'];\n\n    export default {\n        name: 'VueGoogleAutocomplete',\n\n        props: {\n          id: {\n            type: String,\n            required: true\n          },\n\n          classname: String,\n\n          placeholder: {\n            type: String,\n            default: 'Start typing'\n          },\n\n          disabled: {\n            type: Boolean,\n            default: false\n          },\n\n          types: {\n            type: String,\n            default: 'address'\n          },\n\n          fields: {\n            type: Array,\n            default: function() {\n              return BASIC_DATA_FIELDS;\n            },\n          },\n\n          country: {\n            type: [String, Array],\n            default: null\n          },\n\n          enableGeolocation: {\n            type: Boolean,\n            default: false\n          },\n\n          geolocationOptions: {\n            type: Object,\n            default: null\n          }\n        },\n\n        data() {\n            return {\n                /**\n                 * The Autocomplete object.\n                 *\n                 * @type {Autocomplete}\n                 * @link https://developers.google.com/maps/documentation/javascript/reference#Autocomplete\n                 */\n                autocomplete: null,\n\n                /**\n                 * Autocomplete input text\n                 * @type {String}\n                 */\n                autocompleteText: '',\n\n                geolocation: {\n                    /**\n                     * Google Geocoder Objet\n                     * @type {Geocoder}\n                     * @link https://developers.google.com/maps/documentation/javascript/reference#Geocoder\n                     */\n                    geocoder: null,\n\n                    /**\n                     * Filled after geolocate result\n                     * @type {Coordinates}\n                     * @link https://developer.mozilla.org/en-US/docs/Web/API/Coordinates\n                     */\n                    loc: null,\n\n                    /**\n                     * Filled after geolocate result\n                     * @type {Position}\n                     * @link https://developer.mozilla.org/en-US/docs/Web/API/Position\n                     */\n                    position: null\n                }\n            }\n        },\n\n        watch: {\n            autocompleteText: function (newVal, oldVal) {\n\t            this.$emit('inputChange', { newVal, oldVal }, this.id);\n            },\n            country: function(newVal, oldVal) {\n              this.autocomplete.setComponentRestrictions({\n                country: this.country === null ? [] : this.country\n              });\n            }\n        },\n\n        mounted: function() {\n          const options = {};\n\n          if (this.types) {\n            options.types = [this.types];\n          }\n\n          if (this.country) {\n            options.componentRestrictions = {\n              country: this.country\n            };\n          }\n\n          this.autocomplete = new google.maps.places.Autocomplete(\n                document.getElementById(this.id),\n                options\n            );\n\n          this.autocomplete.setFields(this.fields);\n\n          this.autocomplete.addListener('place_changed', this.onPlaceChanged);\n        },\n\n        methods: {\n            /**\n             * When a place changed\n             */\n            onPlaceChanged() {\n                let place = this.autocomplete.getPlace();\n\n                if (!place.geometry) {\n                  // User entered the name of a Place that was not suggested and\n                  // pressed the Enter key, or the Place Details request failed.\n                  this.$emit('no-results-found', place, this.id);\n                  return;\n                }\n\n                if (place.address_components !== undefined) {\n                    // return returnData object and PlaceResult object\n                    this.$emit('placechanged', this.formatResult(place), place, this.id);\n\n                    // update autocompleteText then emit change event\n                    this.autocompleteText = document.getElementById(this.id).value\n                    this.onChange()\n                }\n            },\n\n            /**\n             * When the input gets focus\n             */\n            onFocus() {\n              this.biasAutocompleteLocation();\n              this.$emit('focus');\n            },\n\n            /**\n             * When the input loses focus\n             */\n            onBlur() {\n              this.$emit('blur');\n            },\n\n            /**\n             * When the input got changed\n             */\n            onChange() {\n              this.$emit('change', this.autocompleteText);\n            },\n\n            /**\n             * When a key gets pressed\n             * @param  {Event} event A keypress event\n             */\n            onKeyPress(event) {\n              this.$emit('keypress', event);\n            },\n\n            /**\n             * When a keyup occurs\n             * @param  {Event} event A keyup event\n             */\n            onKeyUp(event) {\n              this.$emit('keyup', event);\n            },\n\n            /**\n             * Clear the input\n             */\n            clear() {\n              this.autocompleteText = ''\n            },\n\n            /**\n             * Focus the input\n             */\n            focus() {\n              this.$refs.autocomplete.focus()\n            },\n\n            /**\n             * Blur the input\n             */\n            blur() {\n              this.$refs.autocomplete.blur()\n            },\n\n            /**\n             * Update the value of the input\n             * @param  {String} value\n             */\n            update (value) {\n              this.autocompleteText = value\n            },\n\n            /**\n             * Update the coordinates of the input\n             * @param  {Coordinates} value\n             */\n            updateCoordinates (value) {\n                if (!value && !(value.lat || value.lng)) return;\n                if (!this.geolocation.geocoder) this.geolocation.geocoder = new google.maps.Geocoder();\n                this.geolocation.geocoder.geocode({'location': value}, (results, status) => {\n                    if (status === 'OK') {\n                        results = this.filterGeocodeResultTypes(results);\n                        if (results[0]) {\n                            this.$emit('placechanged', this.formatResult(results[0]), results[0], this.id);\n                            this.update(results[0].formatted_address);\n                        } else {\n                            this.$emit('error', 'no result for provided coordinates');\n                        }\n                    } else {\n                        this.$emit('error', 'error getting address from coords');\n                    }\n                })\n            },\n\n            /**\n             * Update location based on navigator geolocation\n             */\n            geolocate () {\n                this.updateGeolocation ((geolocation, position) => {\n                    this.updateCoordinates(geolocation)\n                })\n            },\n\n            /**\n             * Update internal location from navigator geolocation\n             * @param  {Function} (geolocation, position)\n             */\n            updateGeolocation (callback = null) {\n                if (navigator.geolocation) {\n                    let options = {};\n                    if(this.geolocationOptions) Object.assign(options, this.geolocationOptions);\n                    navigator.geolocation.getCurrentPosition(position => {\n                        let geolocation = {\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude\n                        };\n                        this.geolocation.loc = geolocation;\n                        this.geolocation.position = position;\n\n                        if (callback) callback(geolocation, position);\n                    }, err => {\n                        this.$emit('error', 'Cannot get Coordinates from navigator', err);\n                    }, options);\n                }\n            },\n\n\n            // Bias the autocomplete object to the user's geographical location,\n            // as supplied by the browser's 'navigator.geolocation' object.\n            biasAutocompleteLocation () {\n                if (this.enableGeolocation) {\n                    this.updateGeolocation((geolocation, position) => {\n                        let circle = new google.maps.Circle({\n                            center: geolocation,\n                            radius: position.coords.accuracy\n                        });\n                        this.autocomplete.setBounds(circle.getBounds());\n                    })\n                }\n            },\n\n            /**\n             * Format result from Geo google APIs\n             * @param place\n             * @returns {{formatted output}}\n             */\n            formatResult (place) {\n                let returnData = {};\n                for (let i = 0; i < place.address_components.length; i++) {\n                    let addressType = place.address_components[i].types[0];\n\n                    if (ADDRESS_COMPONENTS[addressType]) {\n                        let val = place.address_components[i][ADDRESS_COMPONENTS[addressType]];\n                        returnData[addressType] = val;\n                    }\n                }\n\n                returnData['latitude'] = place.geometry.location.lat();\n                returnData['longitude'] = place.geometry.location.lng();\n                return returnData\n            },\n\n            /**\n             * Extract configured types out of raw result as\n             * Geocode API does not allow to do it\n             * @param results\n             * @returns {GeocoderResult}\n             * @link https://developers.google.com/maps/documentation/javascript/reference#GeocoderResult\n             */\n            filterGeocodeResultTypes (results) {\n                if (!results || !this.types) return results;\n                let output = [];\n                let types = [this.types];\n                if (types.includes('(cities)')) types = types.concat(CITIES_TYPE);\n                if (types.includes('(regions)')) types = types.concat(REGIONS_TYPE);\n\n                for (let r of results) {\n                    for (let t of r.types) {\n                        if (types.includes(t)) {\n                            output.push(r);\n                            break;\n                        }\n                    }\n                }\n                return output;\n            }\n        }\n    }\n</script>\n"]}]}